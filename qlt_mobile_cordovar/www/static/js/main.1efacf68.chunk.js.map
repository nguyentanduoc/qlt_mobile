{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["token","mapboxgl","accessToken","App","_this","this","directions","Directions","unit","profile","congestion","map","Map","container","mapContainer","style","center","zoom","on","_map$getCenter","getCenter","lng","lat","setState","toFixed","getZoom","addControl","_this2","react_default","a","createElement","ref","el","className","position","top","bottom","width","height","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yQAMMA,SAAO,4FACbC,IAASC,YAAcF,MA4CRG,8LAxCO,IAAAC,EAAAC,KAEZC,EAAa,IAAIC,IAAW,CAChCL,YAAaF,EACbQ,KAAM,SACNC,QAAS,yBACTC,YAAY,IAERC,EAAM,IAAIV,IAASW,IAAI,CAC3BC,UAAWR,KAAKS,aAChBC,MAAO,oCACPC,OAAQ,CAAC,YAAc,WACvBC,KAAM,KAERN,EAAIO,GAAG,OAAQ,WAAM,IAAAC,EACER,EAAIS,YAAjBC,EADWF,EACXE,IAAKC,EADMH,EACNG,IACblB,EAAKmB,SAAS,CACZF,IAAKA,EAAIG,QAAQ,GACjBF,IAAKA,EAAIE,QAAQ,GACjBP,KAAMN,EAAIc,UAAUD,QAAQ,OAGhCb,EAAIe,WAAWpB,EAAY,6CAEpB,IAAAqB,EAAAtB,KACP,OACEuB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,IAAK,SAAAC,GAAE,OAAIL,EAAKb,aAAekB,GAAIC,UAAU,iCAChDlB,MAAO,CACLmB,SAAU,WACVC,IAAK,EACLC,OAAQ,EACRC,MAAO,OACPC,OAAQ,kBAlCFC,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1efacf68.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport mapboxgl from 'mapbox-gl';\nimport Directions from '@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nconst token= 'pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4M29iazA2Z2gycXA4N2pmbDZmangifQ.-g_vE53SD2WrJ6tFX7QHmA';\nmapboxgl.accessToken = token;\n\n\nclass App extends Component {\n  componentDidMount() {\n    // const { , lat, zoom } = this.state;?\n    const directions = new Directions({\n      accessToken: token,\n      unit: 'metric',\n      profile: 'mapbox/driving-traffic',\n      congestion: true,\n    });\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v9',\n      center: [106.63503660, 10.85268900],\n      zoom: 14,\n    });\n    map.on('move', () => {\n      const { lng, lat } = map.getCenter();\n      this.setState({\n        lng: lng.toFixed(4),\n        lat: lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      });\n    });\n    map.addControl(directions, 'top-left');\n  }\n  render() {\n    return (\n      <div>\n        <div ref={el => this.mapContainer = el} className=\"absolute top right left bottom\"\n          style={{\n            position: 'absolute',\n            top: 0,\n            bottom: 0,\n            width: '100%',\n            height: '100%',\n          }} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  // if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n  //   // The URL constructor is available in all browsers that support SW.\n  //   const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n  //   if (publicUrl.origin !== window.location.origin) {\n  //     // Our service worker won't work if PUBLIC_URL is on a different origin\n  //     // from what our page is served on. This might happen if a CDN is used to\n  //     // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n  //     return;\n  //   }\n\n  //   window.addEventListener('load', () => {\n  //     const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n  //     if (isLocalhost) {\n  //       // This is running on localhost. Let's check if a service worker still exists or not.\n  //       checkValidServiceWorker(swUrl, config);\n\n  //       // Add some additional logging to localhost, pointing developers to the\n  //       // service worker/PWA documentation.\n  //       navigator.serviceWorker.ready.then(() => {\n  //         console.log(\n  //           'This web app is being served cache-first by a service ' +\n  //             'worker. To learn more, visit https://bit.ly/CRA-PWA'\n  //         );\n  //       });\n  //     } else {\n  //       // Is not localhost. Just register service worker\n  //       registerValidSW(swUrl, config);\n  //     }\n  //   });\n  // }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}